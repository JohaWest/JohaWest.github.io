#!/usr/sbin/nft -f

define iifc = eth1               # Interface name to internal network
define i4nw = 10.0.3.0/24       # Internal IPv4 network
define i4ad = 10.0.3.1          # Internal IPv4 address
define i6nw = 2001:db8:2:0003::/64  # Internal IPv6 network
define i6ad = 2001:db8:2:0003::1    # Internal IPv6 address

define eifc = eth0               # Interface name to external network
define e4nw = 192.168.3.0/25    # External IPv4 network
define e4ad = 192.168.3.1       # External IPv4 address
define e6nw = 2001:db8:3:0003::/64  # External IPv6 network
define e6ad = 2001:db8:3:0003::1    # External IPv6 address

define difc = eth2               # Interface name to DMZ network
define d4nw = 192.168.3.128/25  # DMZ IPv4 network
define d4ad = 192.168.3.129     # DMZ IPv4 address
define d6nw = 2001:db8:1:0003::/64  # DMZ IPv6 network
define d6ad = 2001:db8:1:0003::1    # DMZ IPv6 address

flush ruleset

table inet myfilter {
  chain myinput {
    type filter hook input priority 0; policy drop;

    #meta nftrace set 1
    icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-solicit } accept

    # Internal nach Firewall: Accept ICMP
    iifname $iifc ip saddr $i4nw icmp type echo-request accept
    iifname $iifc ip6 saddr $i6nw icmpv6 type echo-request accept

    # DMZ nach Firewall: Accept ICMP
    iifname $difc ip saddr $d4nw icmp type echo-request accept
    iifname $difc ip6 saddr $d6nw icmpv6 type echo-request accept
  }

  chain myoutput {
    type filter hook output priority 0; policy drop;

    #meta nftrace set 1

    icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert } accept

    # Internal nach Firewall Accept ICMP
    oifname $iifc ip daddr $i4nw icmp type echo-reply accept
    oifname $iifc ip6 daddr $i6nw icmpv6 type echo-reply accept

    # DMZ nach Firewall Accept ICMP
    oifname $difc ip daddr $d4nw icmp type echo-reply accept
    oifname $difc ip6 daddr $d6nw icmpv6 type echo-reply accept
  }

chain myforward {
    # Allow Stateful Firewall Connections
    ct state established, related accept

    type filter hook forward priority 0; policy drop;

    # Internal nach DMZ
    iifname $iifc ip saddr $i4nw oifname $difc ip daddr $d4nw ct state new jump int-to-dmz
    iifname $iifc oifname $difc ip6 saddr $i6nw ip6 daddr $d6nw ct state new jump int-to-dmz

    # Internal nach External
    iifname $iifc ip saddr $i4nw oifname $eifc ip daddr $e4nw ct state new jump int-to-ext
    iifname $iifc ip6 saddr $i6nw oifname $eifc ip6 daddr $e6nw ct state new jump int-to-ext

    # DMZ nach External
    iifname $difc ip saddr $d4nw oifname $eifc ip daddr $e4nw ct state new jump dmz-to-ext
    iifname $difc ip6 saddr $d6nw oifname $eifc ip6 daddr $e6nw ct state new jump dmz-to-ext

    # External nach DMZ
    iifname $eifc ip saddr $e4nw oifname $difc ip daddr $d4nw ct state new jump ext-to-dmz
    iifname $eifc ip6 saddr $e6nw oifname $difc ip6 daddr $d6nw ct state new jump ext-to-dmz
  }
 
# Teil 8 - Aufraeumen
  chain int-to-dmz {
    # Allow ping
    icmp type echo-request accept
    icmpv6 type echo-request accept
    # Allow ssh
    tcp dport ssh accept
  }
  
  chain int-to-ext {
    # Allow ping
    icmp type echo-request accept
    icmpv6 type echo-request accept
    # Allow TCP
    ip protocol tcp accept
    ip6 nexthdr tcp accept
    # Allow Traceroute
    udp dport {33434-33523} accept
  }
  
  chain dmz-to-ext {
    # Allow ping
    icmp type echo-request accept
    icmpv6 type echo-request accept
  }
  
  chain ext-to-dmz {
    # Allow ssh
    tcp dport ssh accept
    # Allow ftp
    tcp dport ftp accept
  }
}


#Teil 7 - NAT einrichten (nur IPv4)
table ip mynat {
  chain mysourcenat {
    type nat hook postrouting priority 0;
    oifname $eifc ip saddr $i4nw snat $e4ad
  }
}